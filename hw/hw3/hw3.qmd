---
title: "Biostat 203B Homework 3"
subtitle: "Due Feb 23 @ 11:59PM"
author: "Jiaye Tian and UID: 306541095"
format:
  pdf:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
---

#clear workspace, only keep 'icu_cohort' tibble:
rm(list = setdiff(ls(), "icu_cohort"))

#if you want to interactive plot:
library(plotly)
p <- icu |>
...
ggplotly(p)


Display machine information for reproducibility:
```{r}
sessionInfo()
```

Load necessary libraries (you can add more as needed).
```{r setup}
library(arrow)
library(gtsummary)
library(memuse)
library(pryr)
library(R.utils)
library(tidyverse)
library(ggplot2)
library(lubridate)
```

Display your machine memory.
```{r}
memuse::Sys.meminfo()
```

In this exercise, we use tidyverse (ggplot2, dplyr, etc) to explore the [MIMIC-IV](https://physionet.org/content/mimiciv/3.1/) data introduced in [homework 1](https://ucla-biostat-203b.github.io/2025winter/hw/hw1/hw1.html) and to build a cohort of ICU stays.

## Q1. Visualizing patient trajectory

Visualizing a patient's encounters in a health care system is a common task in clinical data analysis. In this question, we will visualize a patient's ADT (admission-discharge-transfer) history and ICU vitals in the MIMIC-IV data.

### Q1.1 ADT history

A patient's ADT history records the time of admission, discharge, and transfer in the hospital. This figure shows the ADT history of the patient with `subject_id` 10001217 in the MIMIC-IV data. The x-axis is the calendar time, and the y-axis is the type of event (ADT, lab, procedure). The color of the line segment represents the care unit. The size of the line segment represents whether the care unit is an ICU/CCU. The crosses represent lab events, and the shape of the dots represents the type of procedure. The title of the figure shows the patient's demographic information and the subtitle shows top 3 diagnoses.

Hint: We need to pull information from data files `patients.csv.gz`, `admissions.csv.gz`, `transfers.csv.gz`, `labevents.csv.gz`, `procedures_icd.csv.gz`, `diagnoses_icd.csv.gz`, `d_icd_procedures.csv.gz`, and `d_icd_diagnoses.csv.gz`. For the big file `labevents.csv.gz`, use the Parquet format you generated in Homework 2. For reproducibility, make the Parquet folder `labevents_pq` available at the current working directory `hw3`, for example, by a symbolic link. Make your code reproducible.

```{r}
patients_tble <- read_csv("~/mimic/hosp/patients.csv.gz") |> 
  print(width = Inf)

admissions_tble <- read_csv("~/mimic/hosp/admissions.csv.gz") |> 
  print(width = Inf)

transfers_tble <- read_csv("~/mimic/hosp/transfers.csv.gz") |> 
  print(width = Inf)

procedures_icd_tble <- read_csv("~/mimic/hosp/procedures_icd.csv.gz") |>
  print(width = Inf)

diagnoses_icd_tble <- read_csv("~/mimic/hosp/diagnoses_icd.csv.gz") |> 
  print(width = Inf)

d_icd_procedures_tble <- read_csv("~/mimic/hosp/d_icd_procedures.csv.gz") |> 
  print(width = Inf)

d_icd_diagnoses_tble <- read_csv("~/mimic/hosp/d_icd_diagnoses.csv.gz") |> 
  print(width = Inf)
```

```{r}
lab_events <- open_dataset("~/203b/hw/hw3/labevents_pq", 
                           format = "parquet") %>%
  select(subject_id, charttime, itemid, storetime, valuenum) %>%
  collect() 
print(lab_events, width = Inf)
```
```{r}
subject_id <- 10063848

adt_data <- transfers_tble %>%
  filter(subject_id == !!subject_id & !is.na(intime) & !is.na(outtime)) %>%
  mutate(intime = as.POSIXct(intime, 
                             format="%Y-%m-%d %H:%M:%S", 
                             tz="UTC"),
         outtime = as.POSIXct(outtime, 
                              format="%Y-%m-%d %H:%M:%S", 
                              tz="UTC"))

lab_data <- lab_events %>%
  filter(subject_id == !!subject_id) %>%
  distinct(subject_id, charttime, itemid, .keep_all = TRUE) %>% 
  mutate(charttime = as.POSIXct(charttime, tz="UTC"))

patient_info <- admissions_tble %>%
  filter(subject_id == !!subject_id) %>%
  select(subject_id, race) %>%
  distinct() %>%
  left_join(patients_tble %>% select(subject_id, gender, anchor_age), 
            by = "subject_id")

diagnoses_icd <- diagnoses_icd_tble %>%
  mutate(icd_code = str_remove(icd_code, "^0+"),
         icd_version = as.character(icd_version))

d_icd_diagnoses <- d_icd_diagnoses_tble %>%
  mutate(icd_code = str_remove(icd_code, "^0+"),
         icd_version = as.character(icd_version))

diagnosis_data <- diagnoses_icd_tble %>%
  filter(subject_id == !!subject_id) %>%
  left_join(d_icd_diagnoses_tble, by = c("icd_code", "icd_version")) %>%
  left_join(admissions_tble %>% select(subject_id, admittime), 
            by = "subject_id") %>%
  arrange(admittime) %>%  
  slice(1:3)

procedure_data <- procedures_icd_tble %>%
  filter(subject_id == !!subject_id & !is.na(chartdate)) %>%
  left_join(d_icd_procedures_tble, by = "icd_code") %>%
  mutate(chartdate = as.POSIXct(chartdate, 
                                format="%Y-%m-%d", 
                                tz="UTC"),
         procedure_label = ifelse(is.na(long_title), 
                                  "Unknown Procedure", 
                                  str_trunc(long_title, 30, 
                                            side = "right")))
```

```{r}
title_text <- paste("Patient", subject_id, ",", 
                    patient_info$gender, ",", 
                    patient_info$anchor_age, "years old,", 
                    patient_info$race)

subtitle_text <- diagnosis_data %>%
  filter(!is.na(long_title)) %>%
  pull(long_title) %>%
  paste(collapse = "\n")

procedure_data <- procedure_data %>%
  mutate(procedure_label = str_trunc(long_title, 30, side = "right"))

ggplot() +
  
  geom_point(data = procedure_data, 
             aes(x = chartdate, y = "Procedure", 
                 shape = factor(procedure_label)), 
             size = 4) +

  # ADT
  geom_segment(data = adt_data, 
               aes(x = intime, xend = outtime, y = "ADT", 
                   color = careunit, 
                   linewidth = ifelse(str_detect(careunit, 
                                                 "ICU|CCU|SICU"), 5, 2))
               ) + 
  scale_linewidth_identity() +

  # Lab
  geom_point(data = lab_data, 
             aes(x = charttime, y = "Lab"), 
             shape = 3, size = 3, color = "black") +

  scale_x_datetime(date_labels = "%b %d", date_breaks = "7 days") +

  theme_minimal() +
  labs(title = title_text, 
       subtitle = subtitle_text, 
       x = "Calendar Time", 
       y = "Event Type", 
       color = "Care Unit", 
       shape = "Procedure") +

  # Care Unit
  scale_color_manual(values = c("red", 
                                "orange", 
                                "pink", 
                                "purple", 
                                "cyan")) +

  # Procedure
  scale_shape_manual(values = c(16, 17, 15, 4, 5)) +

  guides(
    color = guide_legend(title = "Care Unit", nrow = 1),  
    shape = guide_legend(title = "Procedure", nrow = 1)  
  ) +

  theme(
    legend.position = "bottom",
    legend.box = "vertical",
    legend.spacing.y = unit(0.5, "cm"),
    legend.text = element_text(size = 8),
    plot.title = element_text(size = 12, hjust = 0),
    plot.subtitle = element_text(size = 8, hjust = 0),
    legend.key.size = unit(0.8, "cm") 
  )
```
![](10001217_adt.png)

Do a similar visualization for the patient with `subject_id` 10063848 using ggplot.

### Q1.2 ICU stays

ICU stays are a subset of ADT history. This figure shows the vitals of the patient `10001217` during ICU stays. The x-axis is the calendar time, and the y-axis is the value of the vital. The color of the line represents the type of vital. The facet grid shows the abbreviation of the vital and the stay ID.
```{r}
icu_stays_tble <- read_csv("~/mimic/icu/icustays.csv.gz") |> 
  print(width = Inf)
```
```{r}
chartevents <- read_csv("~/203b/hw/hw3/chartevents_filtered.csv") |> 
  print(width = Inf)
```
```{r}
icu_stays <- icu_stays_tble %>%
  filter(subject_id == 10001217) %>%
  mutate(intime = as.POSIXct(intime, tz = "UTC"),
         outtime = as.POSIXct(outtime, tz = "UTC")) %>%
  select(subject_id, stay_id, intime, outtime)

vitals_data <- chartevents %>%
  filter(subject_id == 10001217, !is.na(valuenum)) %>%
  select(subject_id, stay_id, charttime, itemid, valuenum) %>%
  mutate(
    stay_id = as.double(stay_id),
    charttime = as.POSIXct(charttime, tz = "UTC")
  ) %>%
  inner_join(icu_stays, by = "stay_id") %>% 
  filter(charttime >= intime & charttime <= outtime)

print(vitals_data)
```
```{r}
vitals_data <- vitals_data %>%
  mutate(vital_label = case_when(
    itemid %in% c(220045) ~ "HR",
    itemid %in% c(220179) ~ "NBPd",
    itemid %in% c(220181) ~ "NBPs",
    itemid %in% c(220210) ~ "RR",
    itemid %in% c(223761) ~ "Temperature",
    TRUE ~ NA_character_
  )) %>%
  filter(!is.na(vital_label)) %>%
  group_by(stay_id) %>%
  mutate(relative_charttime = as.numeric(difftime(charttime, 
                                                  min(charttime), 
                                                  units = "hours"))
         ) %>%
  ungroup()
```

```{r}
ggplot(vitals_data, aes(x = relative_charttime, 
                        y = valuenum, 
                        color = vital_label)) +
  geom_line() + 
  geom_point(size = 2) +
  facet_grid(vital_label ~ stay_id, scales = "free_y", switch = "y") +
  theme_minimal() +
  labs(
    title = paste("Patient", unique(vitals_data$subject_id), "ICU stays - Vitals"),
    x = "Time",
    y = "Vital Value"
  ) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    strip.text.y = element_text(angle = 0, hjust = 1), 
    legend.position = "none", 
    panel.grid.major = element_line(color = "grey90") 
  )

```

![](10001217_icu.png)

Do a similar visualization for the patient `10063848`.

## Q2. ICU stays

`icustays.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/icustays/>) contains data about Intensive Care Units (ICU) stays. The first 10 lines are
```{bash}
zcat < ~/mimic/icu/icustays.csv.gz | head
```

### Q2.1 Ingestion

Import `icustays.csv.gz` as a tibble `icustays_tble`.

```{r}
icustays_tble <- read_csv("~/mimic/icu/icustays.csv.gz") |> 
  print(width = Inf)
```

### Q2.2 Summary and visualization

How many unique `subject_id`? Can a `subject_id` have multiple ICU stays? Summarize the number of ICU stays per `subject_id` by graphs. 

```{r}
unique_subjects <- icustays_tble %>% 
  distinct(subject_id) %>% 
  nrow()
print(unique_subjects)
```
```{r}
icu_stay_counts <- icustays_tble %>%
  count(subject_id) %>%
  arrange(desc(n))

print(icu_stay_counts)

icu_summary <- icu_stay_counts %>%
  summarize(
    mean_stays = mean(n),
    median_stays = median(n),
    min_stays = min(n),
    max_stays = max(n)
  )
print(icu_summary)
```
```{r}
ggplot(icu_stay_counts, aes(x = n)) +
  geom_bar(fill = "steelblue") +
  labs(title = "Distribution of ICU Stays per Subject",
       x = "Number of ICU Stays",
       y = "Count of Patients") +
  theme_minimal()
```
```{r}
ggplot(icu_stay_counts, aes(x = n)) +
  geom_bar(fill = "steelblue") +
  scale_x_log10() + 
  labs(title = "Log-Scaled ICU Stays Distribution",
       x = "Number of ICU Stays (log scale)",
       y = "Count of Patients") +
  theme_minimal()
```
```{r}
ggplot(icustays_tble, aes(x = first_careunit)) +
  geom_bar(fill = "coral") +
  labs(title = "Distribution of ICU Stays by First Care Unit",
       x = "First Care Unit",
       y = "Count") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```
## Q3. `admissions` data

Information of the patients admitted into hospital is available in `admissions.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/hosp/admissions/> for details of each field in this file. The first 10 lines are
```{bash}
zcat < ~/mimic/hosp/admissions.csv.gz | head
```

### Q3.1 Ingestion

Import `admissions.csv.gz` as a tibble `admissions_tble`.

```{r}
admissions_tble <- read_csv("~/mimic/hosp/admissions.csv.gz")
```

### Q3.2 Summary and visualization

Summarize the following information by graphics and explain any patterns you see.

- number of admissions per patient  
- admission hour (anything unusual?)  
- admission minute (anything unusual?)  
- length of hospital stay (from admission to discharge) (anything unusual?)  

According to the [MIMIC-IV documentation](https://mimic.mit.edu/docs/iv/about/concepts/#date-shifting), 

> All dates in the database have been shifted to protect patient confidentiality. Dates will be internally consistent for the same patient, but randomly distributed in the future. Dates of birth which occur in the present time are not true dates of birth. Furthermore, dates of birth which occur before the year 1900 occur if the patient is older than 89. In these cases, the patient’s age at their first admission has been fixed to 300.

```{r}
unique_hadm <- admissions_tble %>% distinct(hadm_id) %>% nrow()
unique_subjects <- admissions_tble %>% distinct(subject_id) %>% nrow()

cat("Unique hospital admissions (hadm_id):", unique_hadm, "\n")
cat("Unique patients (subject_id):", unique_subjects, "\n")
```
```{r}
admissions_tble <- admissions_tble %>%
  mutate(los = difftime(dischtime, admittime, units = "days"))

summary(admissions_tble$los)
```
```{r}
admission_counts <- admissions_tble %>%
  count(subject_id) %>%
  arrange(desc(n))

ggplot(admission_counts, aes(x = n)) +
  geom_bar(fill = "steelblue") +
  labs(title = "Distribution of Hospital Admissions per Patient",
       x = "Number of Admissions",
       y = "Count of Patients") +
  theme_minimal()
```
# Most patients have only one hospital admission, 
# but a small subset has an extremely high number of admissions (e.g., 50+ times).
# Patients with excessive admissions might represent chronic disease cases or 
# special cases requiring frequent hospital visits.
# Further investigation is needed to check for potential data entry errors 
# among patients with more than 50 admissions.

```{r}
admissions_tble %>%
  count(subject_id) %>%
  filter(n > 50)
```

# The number of admissions at midnight (00:00) is unusually high, 
# possibly due to a default system value (e.g., missing times being recorded as 00:00).
# The peak in admissions from 3 PM to 9 PM may reflect normal hospital admission patterns.
# The spike at midnight is likely a system default; we will check whether admittime = "00:00:00" 
# corresponds to missing data being automatically filled.
```{r}
admissions_tble %>%
  mutate(admit_hour = hour(admittime)) %>%
  ggplot(aes(x = admit_hour)) +
  geom_histogram(binwidth = 1, fill = "blue", color = "white") +
  labs(title = "Distribution of Admission Hour",
       x = "Hour of Admission",
       y = "Count of Admissions") +
  theme_minimal()

admissions_tble %>%
  filter(hour(admittime) == 0) %>%
  count(admittime) 
```

```{r}
admissions_tble %>%
  mutate(admit_minute = minute(admittime)) %>%
  ggplot(aes(x = admit_minute)) +
  geom_histogram(binwidth = 1, fill = "blue", color = "white") +
  labs(title = "Distribution of Admission Minute",
       x = "Minute of Admission",
       y = "Count of Admissions") +
  theme_minimal()
```
# Admission counts at 0, 15, 30, and 45 minutes are unusually high, # suggesting that round-minute timestamps are overused. # This could indicate that hospital systems tend to round admission times # rather than recording them at a precise second level. # # The following code calculates the proportion of admissions at exact # versus non-exact minutes. The results confirm excessive rounding, # indicating that admission time precision is limited.
```{r}
admissions_tble %>%
  mutate(admit_minute = minute(admittime)) %>%
  count(admit_minute) %>%
  arrange(desc(n))
```

```{r}
ggplot(admissions_tble %>% filter(los <= 30), aes(x = los)) +
  geom_histogram(binwidth = 1, fill = "blue", color = "white") +
  labs(title = "Distribution of Length of Stay (LOS, ≤30 days)",
       x = "Length of Stay (days)",
       y = "Count of Admissions") +
  theme_minimal()
```
# The majority of hospital stays (Length of Stay, LOS) are concentrated between 1-7 days, # but extreme values (>30 days) are not fully represented in the plot. # A small subset of patients has exceptionally long hospital stays (e.g., 100+ days), # which could indicate long-term hospitalization or potential data anomalies.

```{r}
admissions_tble %>%
  filter(los > 100) %>%
  select(subject_id, hadm_id, admittime, dischtime, los)
```

## Q4. `patients` data

Patient information is available in `patients.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/hosp/patients/> for details of each field in this file. The first 10 lines are
```{bash}
zcat < ~/mimic/hosp/patients.csv.gz | head
```

### Q4.1 Ingestion

Import `patients.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/patients/>) as a tibble `patients_tble`.

```{r}
patients_tble <- read_csv("~/mimic/hosp/patients.csv.gz")
```
### Q4.2 Summary and visualization

Summarize variables `gender` and `anchor_age` by graphics, and explain any patterns you see.

```{r}
gender_summary <- patients_tble %>%
  count(gender) %>%
  mutate(percentage = n / sum(n) * 100)

print(gender_summary)

age_summary <- patients_tble %>%
  summarise(
    mean_age = mean(anchor_age, na.rm = TRUE),
    median_age = median(anchor_age, na.rm = TRUE),
    min_age = min(anchor_age, na.rm = TRUE),
    max_age = max(anchor_age, na.rm = TRUE)
  )

print(age_summary)
```
```{r}
gender_plot <- ggplot(patients_tble, aes(x = gender, fill = gender)) +
  geom_bar() +
  labs(
    title = "Distribution of Gender",
    x = "Gender",
    y = "Count"
  ) +
  theme_minimal()

print(gender_plot)

age_plot <- ggplot(patients_tble, aes(x = anchor_age)) +
  geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
  labs(
    title = "Distribution of Age",
    x = "Age",
    y = "Count"
  ) +
  theme_minimal()

print(age_plot)
```
## Q5. Lab results

`labevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/labevents/>) contains all laboratory measurements for patients. The first 10 lines are
```{bash}
zcat < ~/mimic/hosp/labevents.csv.gz | head
```

`d_labitems.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/d_labitems/>) is the dictionary of lab measurements. 
```{bash}
zcat < ~/mimic/hosp/d_labitems.csv.gz | head
```

We are interested in the lab measurements of creatinine (50912), potassium (50971), sodium (50983), chloride (50902), bicarbonate (50882), hematocrit (51221), white blood cell count (51301), and glucose (50931). Retrieve a subset of `labevents.csv.gz` that only containing these items for the patients in `icustays_tble`. Further restrict to the last available measurement (by `storetime`) before the ICU stay. The final `labevents_tble` should have one row per ICU stay and columns for each lab measurement.

![](labevents_tble.png)


Hint: Use the Parquet format you generated in Homework 2. For reproducibility, make `labevents_pq` folder available at the current working directory `hw3`, for example, by a symbolic link.

```{r}
dlabitems_tble <- read_csv("~/mimic/hosp/d_labitems.csv.gz") %>%
  mutate(itemid = as.character(itemid)) %>%
  select(itemid, label) %>%
  collect()
```
```{r}
labevents_tble <- open_dataset("labevents_pq", format = "parquet") |>
  to_duckdb() |>
  select(subject_id, itemid, storetime, valuenum) |>
  filter(itemid %in% c("50912", "50971", "50983", "50902", "50882", "51221", "51301", "50931")) |>
  left_join(
    select(icustays_tble, subject_id, stay_id, intime),
    by = c("subject_id"),
    copy = TRUE
  ) |>
  filter(storetime < intime) |>
  group_by(subject_id, stay_id, itemid) |>
  slice_max(storetime, n = 1) |>
  select(-storetime, -intime) |>
  ungroup() |>
  left_join(dlabitems_tble, by = "itemid", copy = TRUE) |>
  select(-itemid) |>
  pivot_wider(names_from = label, values_from = valuenum) |>
  rename_with(~ str_to_lower(.)) |>
  rename(wbc = 'white blood cells') |>
  arrange(subject_id, stay_id) |> 
  show_query() |>
  collect()

print(labevents_tble)
```

## Q6. Vitals from charted events

`chartevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/chartevents/>) contains all the charted data available for a patient. During their ICU stay, the primary repository of a patient’s information is their electronic chart. The `itemid` variable indicates a single measurement type in the database. The `value` variable is the value measured for `itemid`. The first 10 lines of `chartevents.csv.gz` are
```{bash}
zcat < ~/mimic/icu/chartevents.csv.gz | head
```

`d_items.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/d_items/>) is the dictionary for the `itemid` in `chartevents.csv.gz`. 
```{bash}
zcat < ~/mimic/icu/d_items.csv.gz | head
```

We are interested in the vitals for ICU patients: heart rate (220045), systolic non-invasive blood pressure (220179), diastolic non-invasive blood pressure (220180), body temperature in Fahrenheit (223761), and respiratory rate (220210). Retrieve a subset of `chartevents.csv.gz` only containing these items for the patients in `icustays_tble`. Further restrict to the first vital measurement within the ICU stay. The final `chartevents_tble` should have one row per ICU stay and columns for each vital measurement. 

![](chartevents_tble.png)

Hint: Use the Parquet format you generated in Homework 2. For reproducibility, make `chartevents_pq` folder available at the current working directory, for example, by a symbolic link.
```{r}
d_items_tble <- read_csv("~/mimic/icu/d_items.csv.gz") %>%
  mutate(itemid = as.character(itemid)) %>%
  select(itemid, label) %>%
  collect()
```

```{r}
chartevents_tble <- open_dataset("chartevents_pq", format = "parquet") |>
  to_duckdb() |>
  select(subject_id, stay_id, charttime, itemid, valuenum) |>
  filter(itemid %in% c("220045", "220179", "220180", "223761", "220210")) |>
  left_join(
    select(icustays_tble, subject_id, stay_id, intime, outtime),
    by = c("subject_id", "stay_id"),
    copy = TRUE
  ) |>
  filter(charttime >= intime & charttime <= outtime) |>
  group_by(subject_id, stay_id, itemid) |>
  slice_min(charttime, n = 1) |>
  select(-charttime, -intime, -outtime) |>
  ungroup() |>
  left_join(d_items_tble, by = "itemid", copy = TRUE) |>
  select(-itemid) |>
  pivot_wider(names_from = label, values_from = valuenum) |>
  rename_with(~ str_to_lower(.)) |>
  rename(
    heart_rate = 'heart rate',
    systolic_bp = 'non invasive blood pressure systolic',
    diastolic_bp = 'non invasive blood pressure diastolic',
    temperature_f = 'temperature fahrenheit',
    respiratory_rate = 'respiratory rate'
  ) |>
  arrange(subject_id, stay_id) |> 
  show_query() |>
  collect()

print(chartevents_tble)
```

## Q7. Putting things together

Let us create a tibble `mimic_icu_cohort` for all ICU stays, where rows are all ICU stays of adults (age at `intime` >= 18) and columns contain at least following variables

- all variables in `icustays_tble`  
- all variables in `admissions_tble`  
- all variables in `patients_tble`
- the last lab measurements before the ICU stay in `labevents_tble` 
- the first vital measurements during the ICU stay in `chartevents_tble`

The final `mimic_icu_cohort` should have one row per ICU stay and columns for each variable.

![](mimic_icu_cohort.png)
```{r}
icustays_tble <- collect(icustays_tble)
admissions_tble <- collect(admissions_tble)
patients_tble <- collect(patients_tble)
labevents_tble <- collect(labevents_tble)
chartevents_tble <- collect(chartevents_tble)

mimic_icu_cohort <- icustays_tble |>
  left_join(admissions_tble, by = c("subject_id", "hadm_id")) |>
  left_join(patients_tble, by = "subject_id") |>
  filter(anchor_age + (year(intime) - anchor_year) >= 18) |>
  left_join(labevents_tble, by = c("subject_id", "stay_id")) |>
  left_join(chartevents_tble, by = c("subject_id", "stay_id")) |>
  arrange(subject_id, hadm_id)
print(mimic_icu_cohort)
```

## Q8. Exploratory data analysis (EDA)

Summarize the following information about the ICU stay cohort `mimic_icu_cohort` using appropriate numerics or graphs:

- Length of ICU stay `los` vs demographic variables (race, insurance, marital_status, gender, age at intime)

- Length of ICU stay `los` vs the last available lab measurements before ICU stay

- Length of ICU stay `los` vs the first vital measurements within the ICU stay

- Length of ICU stay `los` vs first ICU unit

```{r}
mimic_icu_cohort_df <- mimic_icu_cohort |> collect()

print(mimic_icu_cohort_df)
summary(mimic_icu_cohort_df)

mimic_icu_cohort_df <- mimic_icu_cohort_df |> drop_na()
```

```{r}
#| eval: false
# 1. Relationship Between ICU Length of Stay (LOS) and Demographic Variables
# 1.1 LOS vs Race
ggplot(mimic_icu_cohort_df, aes(x = race, y = los, fill = race)) +
  geom_boxplot(na.rm = TRUE) +
  labs(title = "Length of ICU Stay vs Race", x = "Race", 
       y = "Length of Stay (days)") +
  theme_minimal()

# 1.2 LOS vs Insurance
ggplot(mimic_icu_cohort_df, aes(x = insurance, y = los, fill = insurance)) +
  geom_boxplot() +
  labs(title = "Length of ICU Stay vs Insurance", 
       x = "Insurance", y = "Length of Stay (days)") +
  theme_minimal()

# 1.3 LOS vs Marital Status
ggplot(mimic_icu_cohort_df, aes(x = marital_status, y = los, 
                                fill = marital_status)) +
  geom_boxplot() +
  labs(title = "Length of ICU Stay vs Marital Status", 
       x = "Marital Status", y = "Length of Stay (days)") +
  theme_minimal()

# 1.4 LOS vs Gender
ggplot(mimic_icu_cohort_df, aes(x = gender, y = los, fill = gender)) +
  geom_boxplot() +
  labs(title = "Length of ICU Stay vs Gender", 
       x = "Gender", y = "Length of Stay (days)") +
  theme_minimal()

# 1.5 LOS vs Age at ICU Admission
ggplot(mimic_icu_cohort_df, aes(x = anchor_age + 
                                  (year(intime) - anchor_year), y = los)) +
  geom_point(alpha = 0.5) +
  labs(title = "Length of ICU Stay vs Age at Admission", 
       x = "Age at Admission", 
       y = "Length of Stay (days)") +
  theme_minimal()

# 2. Relationship Between ICU Length of Stay (LOS) and Last Pre-ICU 
# 2.1 LOS vs Creatinine
ggplot(mimic_icu_cohort_df, aes(x = creatinine, y = los)) +
  geom_point(alpha = 0.5) +
  labs(title = "Length of ICU Stay vs Creatinine", 
       x = "Creatinine", y = "Length of Stay (days)") +
  theme_minimal()

# 2.2 LOS vs Sodium
ggplot(mimic_icu_cohort_df, aes(x = sodium, y = los)) +
  geom_point(alpha = 0.5) +
  labs(title = "Length of ICU Stay vs Sodium", x = "Sodium", 
       y = "Length of Stay (days)") +
  theme_minimal()

# 3. Relationship Between ICU Length of Stay (LOS) and First Vital Signs
# 3.1 LOS vs Heart Rate
ggplot(mimic_icu_cohort_df, aes(x = heart_rate, y = los)) +
  geom_point(alpha = 0.5) +
  labs(title = "Length of ICU Stay vs Heart Rate", 
       x = "Heart Rate", y = "Length of Stay (days)") +
  theme_minimal()

# 3.2 LOS vs Systolic Blood Pressure
ggplot(mimic_icu_cohort_df, aes(x = systolic_bp, y = los)) +
  geom_point(alpha = 0.5) +
  labs(title = "Length of ICU Stay vs Systolic BP", 
       x = "Systolic BP", y = "Length of Stay (days)") +
  theme_minimal()

# 4. Relationship Between ICU Length of Stay (LOS) and First ICU Unit
ggplot(mimic_icu_cohort_df, aes(x = first_careunit, y = los)) +
  geom_boxplot() +
  labs(title = "Length of ICU Stay vs First ICU Unit", 
       x = "First ICU Unit", y = "Length of Stay (days)") +
  theme_minimal()
```